import requests, json
import sys, os, errno
from IPython.display import Image, display

BASE_API = "http://pokeapi.co/api/v2"

def _mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

def render(pokemon):
    print("{}: #{}".format(pokemon["name"], pokemon["id"]))
    display(Image(pokemon["sprites"]["front_default"]))

class _Record(dict):

    def __init__(self, *args, **kwargs):
        super(_Record, self).__init__(*args, **kwargs)

        for key, value in self.items():
            if isinstance(value, dict):
                self[key] = _Record(value)
            elif isinstance(value, list):
                self[key] = [ _Record(elem) for elem in value if isinstance(elem, dict) ]

    def __getattr__(self, attr):
        return self[attr]

    def load(self):
        return (
            self.url
            |> requests.get
            |> .json()
            |> _Record
        )

class Pokemon(dict):
    """docstring for Pokemon."""

    API = BASE_API + "/pokemon"

    @classmethod
    def catch_on_internet(cls, id):
        return (
            "{api}/{id}".format(api=Pokemon.API, id=id)
            |> requests.get
            |> .json()
            |> Pokemon
        )

    @classmethod
    def catch(cls, id):
        local_path = "pokemons/{}.json".format(id)

        if os.path.isfile(local_path):
            with open(local_path, 'r') as f:
                return Pokemon(json.load(f))
        else:
            pkm = Pokemon.catch_on_internet(id)

            _mkdir_p("pokemons")
            with open(local_path, 'w') as f:
                json.dump(pkm, f)

            return pkm


class Species(_Record):
    """docstring for Pokemon."""

    API = BASE_API + "/pokemon-species"

    @classmethod
    def get(cls, id):
        return (
            "{api}/{id}".format(api=Pokemon.API, id=id)
            |> requests.get
            |> .json()
            |> Pokemon
        )


